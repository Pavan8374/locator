@page "/"
@using System.Net.Http.Json;
@using Locator.Models.Request;
@using Locator.utility.IPGeolocationServices;
@using Locator.Models.ViewModels;
@inject IIpGeoLocationService service;

<PageTitle>Home</PageTitle>

<EditForm Model="Model" OnSubmit="FindGeolocation" FormName="IpAddress">
    @* <AntiforgeryToken /> *@
    <div class="container mt-5">
        <div class="card shadow border-0 p-4">
            <h3 class="card-title text-center mb-4">Find Geolocation by IP Address</h3>

            <div class="mb-3">
                <label for="ipInput" class="form-label">Enter IP Address</label>
                <InputText id="ipInput" @bind-Value="Model!.IP4" class="form-control" placeholder="e.g., 192.168.1.1" />
            </div>

            <button type="submit" class="btn btn-primary w-100">
                Find Geolocation
            </button>

            @if (IPDetails != null)
            {
                <div class="mt-4">
                    <h5>Geolocation Details:</h5>
                    <p><strong>IP:</strong> @IPDetails.Ip</p>
                    <p><strong>Country:</strong> @IPDetails.CountryName</p>
                    <p><strong>City:</strong> @IPDetails.City</p>
                    <p><strong>Latitude:</strong> @IPDetails.Latitude</p>
                    <p><strong>Longitude:</strong> @IPDetails.Longitude</p>
                </div>
            }
            else{
                <p><strong>Message:</strong> @Message</p>
            }
        </div>
    </div>
</EditForm>

@code {
    private string ipAddress;
    private GeoLocationModel IPDetails;
    private string Message;

    [SupplyParameterFromForm]
    private Request? Model { get; set; }
    protected override void OnInitialized() => Model ??= new();


    public class Request
    {
        public string IP4 { get; set; }
    }



    private async Task FindGeolocation()
    {
        Console.WriteLine("FindGeolocation called with IP: " + ipAddress);
        var request = Model!.IP4;
        (IPDetails, Message) = await GetIpDetails(request);
    }

    private async Task<(GeoLocationModel?, string?)> GetIpDetails(string ipAddress)
    {
        try
        {
            var model = new IPQueryRequestModel
                {
                    IP4Address = ipAddress,
                    APIKey = "ed3cbf1780ed45b0bd954c5ddf86dfe3"
                };
            var (data, message) = await service.GetIpDetails(model);

            if (data != null)
            {
                return (data, null);
            }
            return (null, message);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
            return (null, ex.Message);
        }
    }
}
